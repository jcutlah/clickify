{"version":3,"sources":["components/Header/Header.js","components/Scoreboard/Scoreboard.js","components/Cards/style.js","components/Cards/Card.js","style.js","components/Status.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Scoreboard","score","total","styles","image","height","width","border","imageWrapper","textAlign","marginBottom","Card","style","id","src","alt","onClick","handleClick","appStyles","status","playing","display","winner","position","backgroundColor","loser","transition","Status","Styles","App","state","images","doubleClick","clickedImages","topScore","hasBeenClicked","_this","forEach","key","resetGame","setState","winGame","alert","handleImageClick","concat","Object","toConsumableArray","shuffle","i","length","j","Math","floor","random","_ref","this","_this2","components_Header_Header","components_Scoreboard_Scoreboard","map","Cards_Card","name","components_Status","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a886d8dc.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst Header = props => (\n        <div className=\"header navbar row justify-content-center text-center mr-auto ml-auto\">\n            <h1>Castle Clickify</h1>\n        </div>\n)\n\nexport default Header;","import React from \"react\";\n\nconst Scoreboard = props => (\n    <div className=\"scoreboard row justify-content-center text-center mr-auto ml-auto\">\n        <div className=\"col\">\n            <p>Don't click the same image twice!!</p>\n            <div className=\"score\">\n                Score: {props.score}\n            </div>\n            <div className='score'>\n                High Score: {props.total}\n            </div>\n        </div>\n    </div>\n)\n\nexport default Scoreboard;","const styles = {\n    image: {\n        height: '200px',\n        width: 'auto',\n        border: '5pt solid #000000',\n\n    },\n    imageWrapper: {\n        textAlign: 'center',\n        marginBottom: \"40px\"\n    }\n};\n\nexport default styles;","import React from \"react\";\nimport styles from \"./style\";\n\nconst Card = props => (\n    <div className=\"card-wrapper col-6 col-md-4 col-lg-3\" style={styles.imageWrapper}>\n        <img id={props.id} src={props.src} alt={props.alt} style={styles.image} onClick={() => props.handleClick(props.id)} />\n    </div> \n)\n\nexport default Card;","const appStyles = {\n    status: {\n        playing: {\n            display: 'none'\n        },\n        winner: {\n            position: \"absolute\",\n            backgroundColor: \"rgba(255,255,255,1)\"\n        },\n        loser: {\n            position: \"absolue\",\n            backgroundColor: \"rgba(0,0,0,0)\",\n            transition: \"opacity 2s ease\"\n        }\n    }\n}\n\nexport default appStyles;","import React from \"react\";\nimport Styles from \"../style\";\n\n\nconst Status = props => (\n        <div className=\"navbar row justify-content-center text-center mr-auto ml-auto\" style={Styles.status[props.status]}>\n            <span>{props.status === \"winner\" ? \"Congratulations, you win.\" : \"Terribly sorry, you lose.\" }</span>\n        </div>\n)\n\nexport default Status;","import React from 'react';\nimport Header from './components/Header/Header';\nimport Scoreboard from './components/Scoreboard/Scoreboard';\nimport Card from './components/Cards/Card';\nimport Status from './components/Status';\nimport images from './images.json';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n    state = {\n        images,\n        doubleClick: false,\n        clickedImages: [],\n        score: 0,\n        topScore: 0,\n        status: \"playing\"\n    }\n    hasBeenClicked = id => {\n        let doubleClick = false;\n        this.state.clickedImages.forEach(key => {\n            // console.log(key, id);\n            if (key === id){\n                // console.log('doubleclicked');\n                doubleClick = true;\n                \n            }\n        })\n        return doubleClick;\n    }\n    resetGame = () => {\n        this.setState({\n            doubleClick: false,\n            score: 0,\n            clickedImages: [],\n            status: \"playing\"\n        })\n    }\n    winGame = () => {\n        alert('you win!');\n        this.resetGame();\n\n    }\n    handleImageClick = id => {\n        // console.log(`click to image with id ${id}`);\n        if (this.hasBeenClicked(id)){\n            // console.log('duplicate detected');\n            this.setState({\n                status: \"loser\"\n            })\n            alert('You lose!');\n            this.resetGame();\n        } else {\n            this.setState({\n                clickedImages: [...this.state.clickedImages, id],\n                score: this.state.score + 1,\n                topScore: this.state.score >= this.state.topScore ? this.state.score + 1 : this.state.topScore\n            });\n            // console.log(\"score: \" + this.state.score);\n            \n        }\n    }\n    componentDidUpdate(){\n        // console.log('componentDidUpdate()');\n        // console.log(this.state);\n        if (this.state.score === this.state.images.length) {\n            // console.log('winningggg');\n            this.winGame();\n        } \n    }\n    shuffle = a => {\n        for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n        }\n        return a;\n    }\n  render() {\n      return (\n        <div className='container'>\n            <Header />\n            <Scoreboard \n            score={this.state.score}\n            total={this.state.topScore}\n            />\n            <div className=\"row justify-content-center\">\n                {this.shuffle(this.state.images).map(image => \n                <Card \n                src={image.src}\n                key={image.id}\n                alt={image.name}\n                id={image.id}\n                handleClick={this.handleImageClick}/>\n                )}\n            </div>\n            <Status status={this.state.status} />\n        </div>\n\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}